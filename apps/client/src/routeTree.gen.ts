/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as AppAppImport } from './routes/app/_app'
import { Route as authAuthImport } from './routes/(auth)/_auth'
import { Route as AppAppIndexImport } from './routes/app/_app.index'

// Create Virtual Routes

const AppImport = createFileRoute('/app')()
const authImport = createFileRoute('/(auth)')()
const authAuthSignupLazyImport = createFileRoute('/(auth)/_auth/signup')()
const authAuthLoginLazyImport = createFileRoute('/(auth)/_auth/login')()

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AppAppRoute = AppAppImport.update({
  id: '/_app',
  getParentRoute: () => AppRoute,
} as any)

const authAuthRoute = authAuthImport.update({
  id: '/_auth',
  getParentRoute: () => authRoute,
} as any)

const AppAppIndexRoute = AppAppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppAppRoute,
} as any)

const authAuthSignupLazyRoute = authAuthSignupLazyImport
  .update({
    id: '/signup',
    path: '/signup',
    getParentRoute: () => authAuthRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/_auth.signup.lazy').then((d) => d.Route))

const authAuthLoginLazyRoute = authAuthLoginLazyImport
  .update({
    id: '/login',
    path: '/login',
    getParentRoute: () => authAuthRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/_auth.login.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_auth': {
      id: '/(auth)/_auth'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authAuthImport
      parentRoute: typeof authRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/_app': {
      id: '/app/_app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppAppImport
      parentRoute: typeof AppRoute
    }
    '/(auth)/_auth/login': {
      id: '/(auth)/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authAuthLoginLazyImport
      parentRoute: typeof authAuthImport
    }
    '/(auth)/_auth/signup': {
      id: '/(auth)/_auth/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authAuthSignupLazyImport
      parentRoute: typeof authAuthImport
    }
    '/app/_app/': {
      id: '/app/_app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppAppIndexImport
      parentRoute: typeof AppAppImport
    }
  }
}

// Create and export the route tree

interface authAuthRouteChildren {
  authAuthLoginLazyRoute: typeof authAuthLoginLazyRoute
  authAuthSignupLazyRoute: typeof authAuthSignupLazyRoute
}

const authAuthRouteChildren: authAuthRouteChildren = {
  authAuthLoginLazyRoute: authAuthLoginLazyRoute,
  authAuthSignupLazyRoute: authAuthSignupLazyRoute,
}

const authAuthRouteWithChildren = authAuthRoute._addFileChildren(
  authAuthRouteChildren,
)

interface authRouteChildren {
  authAuthRoute: typeof authAuthRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authAuthRoute: authAuthRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

interface AppAppRouteChildren {
  AppAppIndexRoute: typeof AppAppIndexRoute
}

const AppAppRouteChildren: AppAppRouteChildren = {
  AppAppIndexRoute: AppAppIndexRoute,
}

const AppAppRouteWithChildren =
  AppAppRoute._addFileChildren(AppAppRouteChildren)

interface AppRouteChildren {
  AppAppRoute: typeof AppAppRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppAppRoute: AppAppRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authAuthRouteWithChildren
  '/app': typeof AppAppRouteWithChildren
  '/login': typeof authAuthLoginLazyRoute
  '/signup': typeof authAuthSignupLazyRoute
  '/app/': typeof AppAppIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof authAuthRouteWithChildren
  '/app': typeof AppAppIndexRoute
  '/login': typeof authAuthLoginLazyRoute
  '/signup': typeof authAuthSignupLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteWithChildren
  '/(auth)/_auth': typeof authAuthRouteWithChildren
  '/app': typeof AppRouteWithChildren
  '/app/_app': typeof AppAppRouteWithChildren
  '/(auth)/_auth/login': typeof authAuthLoginLazyRoute
  '/(auth)/_auth/signup': typeof authAuthSignupLazyRoute
  '/app/_app/': typeof AppAppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/app' | '/login' | '/signup' | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/app' | '/login' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(auth)/_auth'
    | '/app'
    | '/app/_app'
    | '/(auth)/_auth/login'
    | '/(auth)/_auth/signup'
    | '/app/_app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRoute: typeof authRouteWithChildren
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/app"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)",
      "children": [
        "/(auth)/_auth"
      ]
    },
    "/(auth)/_auth": {
      "filePath": "(auth)/_auth.tsx",
      "parent": "/(auth)",
      "children": [
        "/(auth)/_auth/login",
        "/(auth)/_auth/signup"
      ]
    },
    "/app": {
      "filePath": "app",
      "children": [
        "/app/_app"
      ]
    },
    "/app/_app": {
      "filePath": "app/_app.tsx",
      "parent": "/app",
      "children": [
        "/app/_app/"
      ]
    },
    "/(auth)/_auth/login": {
      "filePath": "(auth)/_auth.login.lazy.tsx",
      "parent": "/(auth)/_auth"
    },
    "/(auth)/_auth/signup": {
      "filePath": "(auth)/_auth.signup.lazy.tsx",
      "parent": "/(auth)/_auth"
    },
    "/app/_app/": {
      "filePath": "app/_app.index.tsx",
      "parent": "/app/_app"
    }
  }
}
ROUTE_MANIFEST_END */
